services:
  docker_registry:
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/registry:latest
    build:
      context: build/registry
    user: root
    restart: always
    ports:
      - 5000:5000
    volumes:
      - /registry_cache:/var/lib/registry
      - docker_data_registry:/var/lib/docker

  checkout_source:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ../../maven:/code
      - ../../.git:/code/.git
      - ../../.trunk:/code/.trunk
      - ./task/checkout_source:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/git:latest
    build:
      context: build/git
    depends_on:
      docker_registry:
        condition: service_healthy

  license_scan:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/license_scan:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/fossas_cli:latest
    build:
      context: build/fossas_cli
    depends_on:
      checkout_source:
        condition: service_completed_successfully

  dependency_scan:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/dependency_scan:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/dependency_scan:latest
    build:
      context: build/owasp_dependency_check
    depends_on:
      checkout_source:
        condition: service_completed_successfully

  trunk_check:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/trunk_check:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/trunk:latest
    build:
      context: build/trunk
    depends_on:
      license_scan:
        condition: service_completed_successfully
      dependency_scan:
        condition: service_completed_successfully

  code_coverage:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/code_coverage:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/maven:latest
    build:
      context: build/maven
    depends_on:
      trunk_check:
        condition: service_completed_successfully

  sonar_scan:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/usr/src
      - ./task/sonar_scan:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/sonar:latest
    build:
      context: build/sonar
    depends_on:
      trunk_check:
        condition: service_completed_successfully

  build:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/maven_build:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/maven:latest
    build:
      context: build/maven
    depends_on:
      sonar_scan:
        condition: service_completed_successfully
      code_coverage:
        condition: service_completed_successfully

  performance_test:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/performance_test:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/jmeter:latest
    build:
      context: build/jmeter
    depends_on:
      build:
        condition: service_completed_successfully

  trivy_scan:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/trivy_scan:/action
      - /var/run/docker.sock:/var/run/docker.sock
      - /root:/root
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/trivy:latest
    build:
      context: build/trivy
    depends_on:
      build:
        condition: service_completed_successfully

  dast_scan:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/dast_scan:/action
      - /var/run/docker.sock:/var/run/docker.sock
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/dast_scan:latest
    build:
      context: build/dast_scan
    depends_on:
      build:
        condition: service_completed_successfully

  e2e_test:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    user: root
    volumes:
      - workspace:/workspace
      - ./task/e2e_test:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/cypress_included:latest
    build:
      context: build/cypress_included
    depends_on:
      build:
        condition: service_completed_successfully

  done:
    entrypoint: /bin/bash
    command: /action/run.sh
    working_dir: /workspace
    volumes:
      - workspace:/workspace
      - ./task/done:/action
    image: ${REGISTRY_HOST}${REGISTRY_NAMESPACE}/bash:latest
    build:
      context: build/bash
    depends_on:
      performance_test:
        condition: service_completed_successfully
      trivy_scan:
        condition: service_completed_successfully
      e2e_test:
        condition: service_completed_successfully
      dast_scan:
        condition: service_completed_successfully

volumes:
  workspace:
  docker_data_registry:
